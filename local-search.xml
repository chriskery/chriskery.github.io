<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux虚拟网络设备</title>
    <link href="/2023/11/29/linux%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/"/>
    <url>/2023/11/29/linux%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux-虚拟网络设备"><a href="#Linux-虚拟网络设备" class="headerlink" title="Linux 虚拟网络设备"></a>Linux 虚拟网络设备</h2><h3 id="Linux-Veth"><a href="#Linux-Veth" class="headerlink" title="Linux Veth"></a>Linux Veth</h3><h4 id="veth-pair"><a href="#veth-pair" class="headerlink" title="veth-pair"></a>veth-pair</h4><p>顾名思义，veth-pair 就是一对的虚拟设备接口，和 tap&#x2F;tun 设备不同的是，它都是成对出现的。一端连着协议栈，一端彼此相连着。</p><p>一般用于跨 namespace 通信。</p><blockquote><p>Linux 中默认不同 net namespace 设备无法通信。</p></blockquote><h4 id="网络命名空间"><a href="#网络命名空间" class="headerlink" title="网络命名空间"></a>网络命名空间</h4><p>为了支持网络协议栈的多个实例，Linux在网络栈中引入了网络命名空间。这些独立的协议栈被隔离到不同的命名空间中。</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>本次演示中，先创建一个网络命名空间，然后创建一个 veth 设备对，将设备对分别切换到不同的命名空间中，实现不同命名空间的互相通信。</p><p>准备一个 net namespace</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1创建 namespace</span><br>$ ip netns add netns1<br><span class="hljs-comment"># 查询</span><br>$ ip netns list<br>netns1 (<span class="hljs-built_in">id</span>: 0)<br></code></pre></td></tr></table></figure><p>创建两个Veth设备对</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># ip link add &lt;veth name&gt; type veth peer name &lt;peer name&gt;</span><br>$ ip <span class="hljs-built_in">link</span> add veth0 <span class="hljs-built_in">type</span> veth peer name veth1<br><span class="hljs-comment"># 查询</span><br>$ ip <span class="hljs-built_in">link</span> show<br></code></pre></td></tr></table></figure><p>此时两个 veth 都在默认 net namespace 中，为了测试，先将其中一个切换到 netns1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth1 netns netns1<br><span class="hljs-comment"># 此时再看就只能看到一个了</span><br>$ ip <span class="hljs-built_in">link</span> show<br><span class="hljs-comment"># 去 netns 中查询</span><br>$ ip netns <span class="hljs-built_in">exec</span> netns1 ip <span class="hljs-built_in">link</span> show<br></code></pre></td></tr></table></figure><p>至此，两个不同的命名空间各自有一个Veth，不过还不能通信，因为我们还没给它们分配IP</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ip netns <span class="hljs-built_in">exec</span> netns1 ip addr add 10.1.1.1/24 dev veth1<br>$ ip addr add 10.1.1.2/24 dev veth0<br></code></pre></td></tr></table></figure><p>再启动它们</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ip netns <span class="hljs-built_in">exec</span> netns1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev veth1 up<br>$ ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev veth0 up<br></code></pre></td></tr></table></figure><p>现在两个网络命名空间可以互相通信了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ ping 10.1.1.1<br></code></pre></td></tr></table></figure><p>至此，Veth设备对的基本原理和用法演示结束。</p><blockquote><p>Docker 内部，Veth设备对也是连通容器与宿主机的主要网络设备。</p></blockquote><h3 id="Linux-Bridge"><a href="#Linux-Bridge" class="headerlink" title="Linux Bridge"></a>Linux Bridge</h3><p>Bridge 虚拟设备是用来桥接的网络设备，它相当于现实世界中的交换机，可以连接不同的网络设备，当请求到达 Bridge 设备时，可以通过报文中的 Mac 地址进行广播或转发。</p><p>例如，我们可以创建一个 Bridge 设备来连接 Namespace 中的网络设备和宿主机上的网络。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建veth设备并将一端移动到指定Namespace中</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip netns add ns1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip <span class="hljs-built_in">link</span> add veth0 <span class="hljs-built_in">type</span> veth peer name veth1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth1 netns ns1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">先安装bridge-utils</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install bridge-utils</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建网桥,</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo brctl addbr br0</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载网络设备</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo brctl addif br0 eth0</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo brctl addif br0 veth0</span><br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/339070912">linux bridge实践</a></p><h2 id="3-Linux-路由表"><a href="#3-Linux-路由表" class="headerlink" title="3. Linux 路由表"></a>3. Linux 路由表</h2><p>路由表是 Linux 内核的一个模块，通过定义路由表来决定在某个网络Namespace 中包的流向，从而定义请求会到哪个网络设备上。</p><p>继续以上面的例子演示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动宿主机上的虚拟网络设备，</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> veth0 up</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> br0 up</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">给ns1中的虚拟网络设备设置IP并启动它</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip netns <span class="hljs-built_in">exec</span> ns1 ip addr add 172.18.0.2/24 dev veth1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip netns <span class="hljs-built_in">exec</span> ns1 ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev veth1 up</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">分别设置ns1网络空间的路由和宿主机上的路由</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">default代表0.0.0.0/0,即在Net Namespace中的所有流量都经过veth1的网络设备流出</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install net-tools</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip netns <span class="hljs-built_in">exec</span> ns1  route add default dev veth1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在宿主机上将172.18.0.0/24网段的请求路由到br0网桥</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo route add -net 172.18.0.0/24 dev br0</span><br></code></pre></td></tr></table></figure><p>通过设置路由，对IP地址的请求就能正确被路由到对应的网络设备上，从而实现通信，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看宿主机的IP地址</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip addr show eth0</span><br>6: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master br0 state UP group default qlen 1000<br>    link/ether 00:15:5d:ff:cd:9a brd ff:ff:ff:ff:ff:ff<br>    inet 172.20.160.67/20 brd 172.20.175.255 scope global eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::215:5dff:feff:cd9a/64 scope link<br>       valid_lft forever preferred_lft forever<br><span class="hljs-meta prompt_">#</span><span class="language-bash">从Namespace中访问宿主机的地址</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ip netns <span class="hljs-built_in">exec</span> ns1 ping -c 1 172.20.160.67</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">从宿主机访问Namespace中的网络地址</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">ping -c 1 172.18.0.2</span><br></code></pre></td></tr></table></figure><p>到此就实现了通过网桥连接不同Namespace网络了。</p><h2 id="4-Linux-iptables"><a href="#4-Linux-iptables" class="headerlink" title="4. Linux iptables"></a>4. Linux iptables</h2><p>iptables 是对 Linux 内核的 netfilter 模块进行操作和展示的工具，用来管理包的流动和转送。iptables 定义了一套链式处理的结构，在网络包传输的各个阶段可以使用不同的策略对包进行加工、传送或丢弃。</p><p>在容器虚拟化的技术中，经常会用到两种策略 MASQUERADE 和 DNAT，用于容器和宿主机外部的网络通信。</p><h3 id="MASQUERADE"><a href="#MASQUERADE" class="headerlink" title="MASQUERADE"></a>MASQUERADE</h3><p>iptables 中的 MASQUERADE 策略可以将请求包中的源地址转换成一个网络设备的地址。</p><p>比如上述例子中的那个 Namespace 中网络设备的地址是 172.18.0.2, 这个地址虽然在宿主机上可以路由到 br0 网桥，但是到达宿主机外部之后，是不知道如何路由到这个 IP 地址的，所以如果要请求外部地址的话，需要先通过MASQUERADE 策略将这个 IP 转换成宿主机出口网卡的 IP。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">打开IP转发</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo sysctl -w net.ipv4.conf.all.forwarding=1</span><br>net.ipv4.conf.all.forwarding = 1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">对Namespace中发出的包添加网络地址转换</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo iptables -t nat -A POSTROUTING -s 172.18.0.0/24 -o eth0 -j MASQUERADE</span><br></code></pre></td></tr></table></figure><p>在 Namespace 中请求宿主机外部地址时，将 Namespace 中的源地址转换成宿主机的地址作为源地址，就可以在 Namespace 中访问宿主机外的网络了。</p><h3 id="DNAT"><a href="#DNAT" class="headerlink" title="DNAT"></a>DNAT</h3><p>iptables 中的 DNAT 策略也是做网络地址的转换，不过它是要更换目标地址，经常用于将内部网络地址的端口映射到外部去。</p><p>比如，上面那个例子中的 Namespace 如果需要提供服务给宿主机之外的应用去请求要怎么办呢?</p><p>外部应用没办法直接路由到 172.18.0.2 这个地址，这时候就可以用到 DNAT 策略。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将宿主机上80端口的请求转发到Namespace里的IP上</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo iptables -t nat -A PREROUTING -p tcp -m tcp --dport 80 -j DNAT --to-destination 172.18.0.2:80</span><br></code></pre></td></tr></table></figure><p>这样就可以把宿主机上 80 端口的 TCP 请求转发到 Namespace 中的地址172.18.0.2:80,从而实现外部的应用调用。</p><h2 id="5-Go语言网络库"><a href="#5-Go语言网络库" class="headerlink" title="5. Go语言网络库"></a>5. Go语言网络库</h2><p>容器网络用到的技术就是上面提到的几个点，不过用 Go 语言该怎么配置呢？</p><p>Go 中需要用到的几个网络库介绍。</p><h3 id="net-库"><a href="#net-库" class="headerlink" title="net 库"></a>net 库</h3><p>net 库是 Go 语言内置的库，提供了跨平台支持的网络地址处理，以及各种常见协议的IO支持，比如TCP、UDP、DNS、Unix Socket等。</p><h3 id="netlink库"><a href="#netlink库" class="headerlink" title="netlink库"></a>netlink库</h3><p><a href="https://github.com/vishvananda/netlink">netlink库</a> 是Go 语言的操作网络接口、路由表等配置的库 ，使用它的调用相当于我们通过 IP 命令去管理网络接口。</p><h3 id="netns库"><a href="#netns库" class="headerlink" title="netns库"></a>netns库</h3><p><a href="https://github.com/vishvananda/netns">netns库</a> 就是 Go 语言版的<code>ip netns exec</code> 命令实现。通过这个库可以让 netlink 库中配置网络接口的代码在某个容器的 Net amespace 中执行。</p><p>转载自: <a href="https://github.com/lixd/daily-notes/blob/master/Golang/mydocker/06-1-%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF.md">https://github.com/lixd/daily-notes/blob/master/Golang/mydocker/06-1-%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF.md</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux mount用法</title>
    <link href="/2023/11/28/systemcall-mount%E5%88%86%E7%B1%BB/"/>
    <url>/2023/11/28/systemcall-mount%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="mount-–bind"><a href="#mount-–bind" class="headerlink" title="mount –bind"></a>mount –bind</h2><p>我们可以通过mount –bind命令来将两个目录连接起来，mount –bind命令是将前一个目录挂载到后一个目录上，所有对后一个目录的访问其实都是对前一个目录的访问，如下所示：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">## test1 test2为两个不同的目录</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls test1</span><br><span class="hljs-number">11</span>.test  <span class="hljs-number">1</span>.test<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls test2</span><br><span class="hljs-number">22</span>.test  <span class="hljs-number">2</span>.test<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls -lid test1</span><br><span class="hljs-number">1441802</span> drwx------ <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> 09<span class="hljs-symbol">:</span><span class="hljs-number">50</span> test1<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls -lid test2</span><br><span class="hljs-number">1441803</span> drwx------ <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> 09<span class="hljs-symbol">:</span><span class="hljs-number">51</span> test2<br><br><span class="hljs-comment">## 执行mount --bind 将test1挂载到test2上，inode号都变为test1的inode</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># mount --bind test1 test2</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls -lid test1</span><br><span class="hljs-number">1441802</span> drwx------ <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> 09<span class="hljs-symbol">:</span><span class="hljs-number">50</span> test1<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls -lid test2</span><br><span class="hljs-number">1441802</span> drwx------ <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> 09<span class="hljs-symbol">:</span><span class="hljs-number">50</span> test2<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls test2</span><br><span class="hljs-number">11</span>.test  <span class="hljs-number">1</span>.test<br><br><span class="hljs-comment">## 对test2的访问或修改实际上是改动test1目录</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># cd test2</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux/test2</span> <span class="hljs-comment"># touch 3.test</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux/test2</span> <span class="hljs-comment"># ls</span><br><span class="hljs-number">11</span>.test  <span class="hljs-number">1</span>.test  <span class="hljs-number">3</span>.test<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux/test2</span> <span class="hljs-comment"># cd ..</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls test1</span><br><span class="hljs-number">11</span>.test  <span class="hljs-number">1</span>.test  <span class="hljs-number">3</span>.test<br><br><span class="hljs-comment">## 解挂载后，test1目录保持修改，test2保持不变</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># umount test2</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls test1</span><br><span class="hljs-number">11</span>.test  <span class="hljs-number">1</span>.test  <span class="hljs-number">3</span>.test<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls test2</span><br><span class="hljs-number">22</span>.test  <span class="hljs-number">2</span>.test<br><br><span class="hljs-comment">## 将test2挂载到test1上</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls -lid test2</span><br><span class="hljs-number">1441803</span> drwx------ <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> 09<span class="hljs-symbol">:</span><span class="hljs-number">51</span> test2<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># mount --bind test2 test1</span><br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls -lid test1</span><br><span class="hljs-number">1441803</span> drwx------ <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> 09<span class="hljs-symbol">:</span><span class="hljs-number">51</span> test1<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls -lid test2</span><br><span class="hljs-number">1441803</span> drwx------ <span class="hljs-number">2</span> root root <span class="hljs-number">4096</span> <span class="hljs-title class_">Feb</span> <span class="hljs-number">13</span> 09<span class="hljs-symbol">:</span><span class="hljs-number">51</span> test2<br>linux-<span class="hljs-title class_">UMLhEm</span><span class="hljs-symbol">:/home/test/linux</span> <span class="hljs-comment"># ls test1</span><br><span class="hljs-number">22</span>.test  <span class="hljs-number">2</span>.test<br></code></pre></td></tr></table></figure><p>以mount –bind test1 test2为例，当mount –bind命令执行后，Linux将会把被挂载目录的目录项（也就是该目录文件的block，记录了下级目录的信息）屏蔽，即test2的下级路径被隐藏起来了（注意，只是隐藏不是删除，数据都没有改变，只是访问不到了）。同时，内核将挂载目录（test1）的目录项记录在内存里的一个s_root对象里，在mount命令执行时，VFS会创建一个vfsmount对象，这个对象里包含了整个文件系统所有的mount信息，其中也会包括本次mount中的信息，这个对象是一个HASH值对应表（HASH值通过对路径字符串的计算得来），表里就有 &#x2F;test1 到 &#x2F;test2 两个目录的HASH值对应关系。</p><p>命令执行完后，当访问 &#x2F;test2下的文件时，系统会告知 &#x2F;test2 的目录项被屏蔽掉了，自动转到内存里找VFS，通过vfsmount了解到 &#x2F;test2 和 &#x2F;test1 的对应关系，从而读取到 &#x2F;test1 的inode，这样在 &#x2F;test2 下读到的全是 &#x2F;test1 目录下的文件。</p><blockquote><ul><li>.mount –bind连接的两个目录的inode号码并不一样，只是被挂载目录的block被屏蔽掉，inode被重定向到挂载目录的inode（被挂载目录的inode和block依然没变）。</li><li>.两个目录的对应关系存在于内存里，一旦重启挂载关系就不存在了。</li></ul></blockquote><p>在固件开发过程中常常遇到这样的情况：为测试某个新功能，必需修改某个系统文件。而这个文件在只读文件系统上（总不能为一个小小的测试就重刷固件吧），或者是虽然文件可写，但是自己对这个改动没有把握，不愿意直接修改。这时候mount –bind就是你的好帮手。 <br>假设我们要改的文件是&#x2F;etc&#x2F;hosts，可按下面的步骤操作： <br>1. 把新的hosts文件放在&#x2F;tmp下。当然也可放在硬盘或U盘上。 <br>2. mount –bind &#x2F;tmp&#x2F;hosts &#x2F;etc&#x2F;hosts       此时的&#x2F;etc目录是可写的，所做修改不会应用到原来的&#x2F;etc目录，可以放心测试。测试完成了执行 umount &#x2F;etc&#x2F;hosts 断开绑定。</p><p>通过执行下面的命令可以创建一个挂载点：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mount <span class="hljs-comment">--bind foo foo</span><br></code></pre></td></tr></table></figure><p>在挂载后可以通过mount命令查看所有的挂载点.这样就可以使用一些mount的属性，最简单的例子，例如：</p><blockquote><p>sudo mount,ro –bind test_dir test_dir</p></blockquote><p>可以让test_dir成为一个是read only的目录。无论改目录中的文件夹或者文件的权限是什么，这个文件夹都是只读的。</p><p>如果要递归的挂载一个目录可以使用如下命令.<br>mount –rbind olddir newdir<br>递归的挂载是指如果挂载的olddir内有挂载点，会把这个挂载点也一起挂载到newdir下。</p><h2 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * These are the fs-independent mount-flags: up to 32 flags are supported </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_RDONLY        1         <span class="hljs-comment">/* 对应-o ro/rw */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_NOSUID        2         <span class="hljs-comment">/* 对应-o suid/nosuid */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_NODEV         4         <span class="hljs-comment">/* 对应-o dev/nodev */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_NOEXEC        8         <span class="hljs-comment">/* 对应-o exec/noexec */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_SYNCHRONOUS  16         <span class="hljs-comment">/* 对应-o sync/async */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_REMOUNT      32         <span class="hljs-comment">/* 对应-o remount，告诉mount这是一次remount操作 */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_MANDLOCK     64         <span class="hljs-comment">/* 对应-o mand/nomand */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_DIRSYNC      128        <span class="hljs-comment">/* 对应-o dirsync */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_NOATIME      1024       <span class="hljs-comment">/* 对应-o atime/noatime */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_NODIRATIME   2048       <span class="hljs-comment">/* 对应-o diratime/nodiratime */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_BIND         4096       <span class="hljs-comment">/* 对应-B/--bind选项，告诉mount这是一次bind操作 */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_MOVE         8192       <span class="hljs-comment">/* 对应-M/--move，告诉mount这是一次move操作 */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_REC          16384      <span class="hljs-comment">/* rec是recursive的意思，这个flag一般不单独出现，都是伴随这其它flag，表示递归的进行操作 */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_VERBOSE      32768      <span class="hljs-comment">/* 对应-v/--verbose */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_SILENT       32768      <span class="hljs-comment">/* 对应-o silent/loud */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_POSIXACL     (1&lt;&lt;16)    <span class="hljs-comment">/* 让VFS不应用umask，如NFS */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_UNBINDABLE   (1&lt;&lt;17)    <span class="hljs-comment">/* 对应--make-unbindable */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_PRIVATE      (1&lt;&lt;18)    <span class="hljs-comment">/* 对应--make-private */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_SLAVE        (1&lt;&lt;19)    <span class="hljs-comment">/* 对应--make-slave */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_SHARED       (1&lt;&lt;20)    <span class="hljs-comment">/* 对应--make-shared */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_RELATIME     (1&lt;&lt;21)    <span class="hljs-comment">/* 对应-o relatime/norelatime */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_KERNMOUNT    (1&lt;&lt;22)    <span class="hljs-comment">/* 这个一般不在应用层使用，一般内核挂载的文件系统如sysfs使用，表示使用kern_mount()进行挂载 */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_I_VERSION    (1&lt;&lt;23)    <span class="hljs-comment">/* 对应-o iversion/noiversion */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_STRICTATIME  (1&lt;&lt;24)    <span class="hljs-comment">/* 对应-o strictatime/nostrictatime */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_LAZYTIME     (1&lt;&lt;25)    <span class="hljs-comment">/* 对应 -o lazytime/nolazytime*/</span></span><br><br><span class="hljs-comment">/* 下面这几个flags都是内核内部使用的，不由mount系统调用传递 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_SUBMOUNT     (1&lt;&lt;26)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_NOREMOTELOCK (1&lt;&lt;27)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_NOSEC        (1&lt;&lt;28)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_BORN         (1&lt;&lt;29)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_ACTIVE       (1&lt;&lt;30)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_NOUSER       (1&lt;&lt;31)</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * Superblock flags that can be altered by MS_REMOUNT </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_RMT_MASK     (MS_RDONLY|MS_SYNCHRONOUS|MS_MANDLOCK|MS_I_VERSION|\                   </span><br>                         MS_LAZYTIME)  <span class="hljs-comment">// 可以在remount时改变的flags  </span><br>  <br><span class="hljs-comment">/* </span><br><span class="hljs-comment"> * Old magic mount flag and mask </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_MGC_VAL 0xC0ED0000      <span class="hljs-comment">/* magic number */</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MS_MGC_MSK 0xffff0000      <span class="hljs-comment">/* flags mask */</span></span><br></code></pre></td></tr></table></figure><p>除了上面这些flags对应的mount选项，剩下的基本就是data来传递。</p><h2 id="mount-umount函数详解"><a href="#mount-umount函数详解" class="headerlink" title="mount&#x2F;umount函数详解"></a>mount&#x2F;umount函数详解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">功能描述：<br>mount挂上文件系统，umount执行相反的操作。<br>  <br>用法：  <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mount.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mount</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *source, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *target,</span></span><br><span class="hljs-params"><span class="hljs-function">   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filesystemtype, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> mountflags, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *data)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">umount</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *target)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">umount2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *target, <span class="hljs-type">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><p>参数</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">source</span>：将要挂上的文件系统，通常是一个设备名。<br><span class="hljs-string">target</span>：文件系统所要挂在的目标目录。<br><span class="hljs-string">filesystemtype</span>：文件系统的类型，可以是<span class="hljs-string">&quot;ext2&quot;</span>，<span class="hljs-string">&quot;msdos&quot;</span>，<span class="hljs-string">&quot;proc&quot;</span>，<span class="hljs-string">&quot;nfs&quot;</span>，<span class="hljs-string">&quot;iso9660&quot;</span> 。。。<br><span class="hljs-string">mountflags</span>：指定文件系统的读写访问标志，可能值有以下<br><br><span class="hljs-string">MS_BIND</span>：执行<span class="hljs-string">bind</span>挂载，使文件或者子目录树在文件系统内的另一个点上可视。<br><span class="hljs-string">MS_DIRSYNC</span>：同步目录的更新。<br><span class="hljs-string">MS_MANDLOCK</span>：允许在文件上执行强制锁。<br><span class="hljs-string">MS_MOVE</span>：移动子目录树。<br><span class="hljs-string">MS_NOATIME</span>：不要更新文件上的访问时间。<br><span class="hljs-string">MS_NODEV</span>：不允许访问设备文件。<br><span class="hljs-string">MS_NODIRATIME</span>：不允许更新目录上的访问时间。<br><span class="hljs-string">MS_NOEXEC</span>：不允许在挂上的文件系统上执行程序。<br><span class="hljs-string">MS_NOSUID</span>：执行程序时，不遵照<span class="hljs-built_in">set-user-ID</span> 和 <span class="hljs-built_in">set-group-ID位。</span><br><span class="hljs-string">MS_RDONLY</span>：指定文件系统为只读。<br><span class="hljs-string">MS_REMOUNT</span>：重新加载文件系统。这允许你改变现存文件系统的<span class="hljs-string">mountflag</span>和数据，而无需使用先卸载，再挂上文件系统的方式。<br><span class="hljs-string">MS_SYNCHRONOUS</span>：同步文件的更新。<br><span class="hljs-string">MNT_FORCE</span>：强制卸载，即使文件系统处于忙状态。<br><span class="hljs-string">MNT_EXPIRE</span>：将挂载点标志为过时<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>mount</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
